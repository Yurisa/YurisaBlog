<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Vue.js填了个坑]]></title>
      <url>/2017/07/19/vue/</url>
      <content type="html"><![CDATA[<h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><p>最近在做一个项目，项目要求是前端要用Vue.js后台用node.js。<br>下面分享一下现在我对于Vue.js的理解以及在写代码过程中所遇到的坑。<br><a id="more"></a></p>
<h3 id="Vue-js简单介绍"><a href="#Vue-js简单介绍" class="headerlink" title="Vue.js简单介绍"></a>Vue.js简单介绍</h3><blockquote>
<p>摘自Vue.js官网</p>
</blockquote>
<p>Vue.js（读音 /vjuː/，类似于 view） 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。</p>
<p><img src="https://cn.vuejs.org/images/logo.png" alt="vue icon"></p>
<h3 id="Vue-js的安装"><a href="#Vue-js的安装" class="headerlink" title="Vue.js的安装"></a>Vue.js的安装</h3><p>具体的安装步骤官网都有，直接贴官网<a href="https://cn.vuejs.org/" target="_blank" rel="external">Vue.js</a><br>我想说的是在Vue1.0的时候有一个官方推荐的 ajax 插件 vue-resource，但是自从 Vue 更新到 2.0 之后，作者就宣告不在对Vue-resource更新了，取而代之的是神器axios。<br>引入方式只要用简单的脚手架:npm install axios</p>
<h3 id="Vue-js的请求部分"><a href="#Vue-js的请求部分" class="headerlink" title="Vue.js的请求部分"></a>Vue.js的请求部分</h3><p>然后贴一下我最近写的一点关于Vue.js中发送请求的方式，我的部分只用到了Get和Post请求<br>直接上代码<br>Get:<img src="/images/get.png" alt="get icon"><br>Post:<img src="/images/post.png" alt="post icon"><br>这里就引出我遇到的的第一个坑，this的作用域问题.在这之前先要说一下 “=&gt;{}” ，这个箭头函数是ES6语法的新特性相当于ES5语法的 “function(){}”，还有关于Promise，以及它的then方法，也是ES6的新特性。关于ES6语法大家可以看一下阮一峰的这篇文章 <a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a><br>回到正题，回调函数所带来一系列的this作用域问题，大家可以看上面两张get和post的图，此时在回调函数里的this已经不是之前的Vue的对象，而是export default这整个对象。<br>解决方法:创建临时对象，即上图的 <strong>let _this = this </strong>,或者直接用=&gt;{}。</p>
<h3 id="Vue-js与其他UI框架的结合使用"><a href="#Vue-js与其他UI框架的结合使用" class="headerlink" title="Vue.js与其他UI框架的结合使用"></a>Vue.js与其他UI框架的结合使用</h3><p>Vue.js官方推荐的UI框架是elementui，它的每个组件的代码部分都是用了Vue。可以这么说，在学习Vue的过程中elementui帮了我很大的忙。接着我们想在项目里运用layui，之前同组的小伙伴尝试了Vue高大上的服务端渲染，发现layui的js不能运行。于是最后还是回到客户端。<br>下图是我用了layui对象的laypage方法进行分页(因为之前课程设计中用过我对它情有独钟)，它与原来的jquery的使用方式有些不同，大家可以比较着看。<br><a href="http://www.layui.com/laypage/" target="_blank" rel="external">laypage的jquery使用方法</a><br><img src="/images/fenye.png" alt="fenye icon"></p>
<h3 id="Vue-js的指令部分"><a href="#Vue-js的指令部分" class="headerlink" title="Vue.js的指令部分"></a>Vue.js的指令部分</h3><p>Vue主要有6个指令<br>1.v-if 2.v-show 3.v-else 4.v-for 5.v-bind 6.v-on<br>具体用法我就不展开了，参照这篇文章<a href="http://www.cnblogs.com/new-dream-new-hope/p/5777012.html" target="_blank" rel="external">Vue.js常用指令总结</a><br>说说我这里碰到的问题，首先一个数据绑定问题。因为Vue是JS的框架，它简化了JS，它是MVVM模式的。它有一个双向数据绑定的功能(听起来是不是很炫酷)，之前我以为仅仅只有v-model绑定数据，而其他指令比如v-for仅仅只在页面加载的时候渲染完成页面，这可能是受之前用<strong>thinkphp</strong>(php的一个框架)和<strong>smaty</strong>(php渲染页面的视图引擎)的影响，这两者都是直接在加载时渲染完页面的。然而Vue是绑定数据，数据一有改变所有绑定这个数据的地方通俗点就是所有用到这个数据的地方都会有动态的改变。<br>不多说，直接上代码：<br><img src="/images/model.png" alt="model icon"><br>还有一个坑是v-for的index参数<br><img src="/images/index1.png" alt="index1 icon"><br><img src="/images/index2.png" alt="index2 icon"><br>以上是正确的用法，我碰到的问题是我之前直接用this.index获取元素的下标，console.log显示为undefined，但是splice(this.index，1)居然能执行，我就觉得很神奇，但好在及时找到了正确的方法。</p>
<h2 id="前端的前景"><a href="#前端的前景" class="headerlink" title="前端的前景"></a>前端的前景</h2><p>之前去某上市公司认知实习时，了解到现阶段前端工程师是稀缺的，但是后端工程师是核心，大公司都没有全栈这个概念。但其实我的理解是，随着前端的发展，前端能做的事情越来越多不再是简单的做页面和传数据，比如如果业务逻辑放在前端来处理的话，后端会变得非常简洁。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次写技术博客，希望大家多多批评，能一起交流一起进步。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue.js </tag>
            
            <tag> mvvm </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ip地址理解]]></title>
      <url>/2017/07/19/ip/</url>
      <content type="html"><![CDATA[<p>##ip地址分类</p>
<ol>
<li><p>A类地址</p>
<p>A类地址的表示范围为：0.0.0.0~126.255.255.255，默认网络掩码为：255.0.0.0；A类地址分配给规模特别大的网络使用。A类网络用第一组数字表示网络本身的地址，后面三组数字作为连接于网络上的主机的地址。分配给具有大量主机（直接个人用户）而局域网络个数较少的大型网络。例如IBM公司的网络。</p>
</li>
<li><p>B类地址</p>
<p>B类地址的表示范围为：128.0.0.0~191.255.255.255，默认网络掩码为：255.255.0.0；B类地址分配给一般的中型网络。B类网络用第一、二组数字表示网络的地址，后面两组数字代表网络上的主机地址。</p>
</li>
<li><p>C类地址</p>
<p>C类地址的表示范围为：192.0.0.0~223.255.255.255，默认网络掩码为：255.255.255.0；C类地址分配给小型网络，如一般的局域网和校园网，它可连接的主机数量是最少的，采用把所属的用户分为若干的网段进行管理。C类网络用前三组数字表示网络的地址，最后一组数字作为网络上的主机地址。</p>
</li>
</ol>
<p>##私有ip地址</p>
<pre><code>私有IP地址的范围有： 
</code></pre><p>   A类: 10.0.0.0-10.255.255.255 </p>
<p>   B类: 172.16.0.0—172.31.255.255 </p>
<p>   C类: 192.168.0.0-192.168.255.255 </p>
<p>   上述的IP地址都是可以使用在局域网中的。</p>
<p>##常见ip地址分辨<br>一、0.0.0.0</p>
<p>  严格说来，0.0.0.0已经不是一个真正意义上的IP地址了。它表示的是这样一个集合：所有不清楚的主机和目的网络。这里的“不清楚”是指在本机的路由表里没有特定条目指明如何到达。对本机来说，它就是一个“收容所”，所有不认识的“三无”人员，一律送进去。如果你在网络设置中设置了缺省网关，那么Windows系统会自动产生一个目的地址为0.0.0.0的缺省路由。</p>
<p>二、255.255.255.255</p>
<p>  限制广播地址。对本机来说，这个地址指本网段内(同一广播域)的所有主机。如果翻译成人类的语言，应该是这样：“这个房间里的所有人都注意了！”这个地址不能被路由器转发。</p>
<p>三、127.0.0.1</p>
<p>  本机地址，主要用于测试。用汉语表示，就是“我自己”。在Windows系统中，这个地址有一个别名“Localhost”。寻址这样一个地址，是不能把它发到网络接口的。除非出错，否则在传输介质上永远不应该出现目的地址为“127.0.0.1”的数据包。</p>
<p>##关于ip的常用命令行<br>1.·arp -a或arp -g<br>　　用于查看高速缓存中的所有项目。-a和-g参数的结果是一样的，多年来-g一直是UNIX平台上用来显示ARP高速缓存中所有项目的选项，而Windows用的是arp -a（-a可被视为all，即全部的意思），但它也可以接受比较传统的-g选项。<br>  <img src="/images/arp.png" alt="arp icon"><br>2.netstat -an<br>  netstat命令的功能是显示网络连接、路由表和网络接口信息，可以让用户得知目前都有哪些网络连接正在运作。<br>   -a: 查看所有连接和监听端口<br>   -n: 显示IP地址和端口号，而不显示域名和服务器<br>  <img src="/images/netstat.png" alt="netstat icon"><br>3.ping<br>  ping命令用于：确定网络和各外部主机的状态；跟踪和隔离硬件和软件问题；测试、评估和管理网络。如果主机正在运行并连在网上，它就对回送信号进行响应。每个回送信号请求包含一个网际协议（IP）和 ICMP 头，后面紧跟一个 tim 结构，以及来填写这个信息包的足够的字节。缺省情况是连续发送回送信号请求直到接收到中断信号（Ctrl-C）。<br>  ping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和(信息)包丢失情况的统计信息，并且在完成之后显示一个简要总结。ping 命令在程序超时或当接收到 SIGINT 信号时结束。Host 参数或者是一个有效的主机名或者是因特网地址。<br><img src="/images/ping.png" alt="ping icon"></p>
]]></content>
      
        <categories>
            
            <category> 网络管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ip地址 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
