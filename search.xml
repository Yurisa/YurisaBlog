<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Vue.js填了个坑]]></title>
      <url>/2017/07/19/vue/</url>
      <content type="html"><![CDATA[<h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><p>最近在做一个项目，项目要求是前端要用Vue.js后台用node.js。<br>下面分享一下现在我对于Vue.js的理解以及在写代码过程中所遇到的坑。<br><a id="more"></a></p>
<h3 id="Vue-js简单介绍"><a href="#Vue-js简单介绍" class="headerlink" title="Vue.js简单介绍"></a>Vue.js简单介绍</h3><blockquote>
<p>摘自Vue.js官网</p>
</blockquote>
<p>Vue.js（读音 /vjuː/，类似于 view） 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。</p>
<p><img src="https://cn.vuejs.org/images/logo.png" alt="vue icon"></p>
<h3 id="Vue-js的安装"><a href="#Vue-js的安装" class="headerlink" title="Vue.js的安装"></a>Vue.js的安装</h3><p>具体的安装步骤官网都有，直接贴官网<a href="https://cn.vuejs.org/" target="_blank" rel="external">Vue.js</a><br>我想说的是在Vue1.0的时候有一个官方推荐的 ajax 插件 vue-resource，但是自从 Vue 更新到 2.0 之后，作者就宣告不在对Vue-resource更新了，取而代之的是神器axios。<br>引入方式只要用简单的脚手架:npm install axios</p>
<h3 id="Vue-js的请求部分"><a href="#Vue-js的请求部分" class="headerlink" title="Vue.js的请求部分"></a>Vue.js的请求部分</h3><p>然后贴一下我最近写的一点关于Vue.js中发送请求的方式，我的部分只用到了Get和Post请求<br>直接上代码<br>Get:<img src="/images/get.png" alt="get icon"><br>Post:<img src="/images/post.png" alt="post icon"><br>这里就引出我遇到的的第一个坑，this的作用域问题.在这之前先要说一下 “=&gt;{}” ，这个箭头函数是ES6语法的新特性相当于ES5语法的 “function(){}”，还有关于Promise，以及它的then方法，也是ES6的新特性。关于ES6语法大家可以看一下阮一峰的这篇文章 <a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a><br>回到正题，回调函数所带来一系列的this作用域问题，大家可以看上面两张get和post的图，此时在回调函数里的this已经不是之前的Vue的对象，而是export default这整个对象。<br>解决方法:创建临时对象，即上图的 <strong>let _this = this </strong>。</p>
<h3 id="Vue-js与其他UI框架的结合使用"><a href="#Vue-js与其他UI框架的结合使用" class="headerlink" title="Vue.js与其他UI框架的结合使用"></a>Vue.js与其他UI框架的结合使用</h3><p>Vue.js官方推荐的UI框架是elementui，它的每个组件的代码部分都是用了Vue。可以这么说，在学习Vue的过程中elementui帮了我很大的忙。接着我们想在项目里运用layui，之前同组的小伙伴尝试了Vue高大上的服务端渲染，发现layui的js不能运行。于是最后还是回到客户端。<br>下图是我用了layui对象的laypage方法进行分页(因为之前课程设计中用过我对它情有独钟)，它与原来的jquery的使用方式有些不同，大家可以比较着看。<br><a href="http://www.layui.com/laypage/" target="_blank" rel="external">laypage的jquery使用方法</a><br><img src="/images/fenye.png" alt="fenye icon"></p>
<h3 id="Vue-js的指令部分"><a href="#Vue-js的指令部分" class="headerlink" title="Vue.js的指令部分"></a>Vue.js的指令部分</h3><p>Vue主要有6个指令<br>1.v-if 2.v-show 3.v-else 4.v-for 5.v-bind 6.v-on<br>具体用法我就不展开了，参照这篇文章<a href="http://www.cnblogs.com/new-dream-new-hope/p/5777012.html" target="_blank" rel="external">Vue.js常用指令总结</a><br>说说我这里碰到的问题，首先一个数据绑定问题。因为Vue是JS的框架，它简化了JS，它是MVVM模式的。它有一个双向数据绑定的功能(听起来是不是很炫酷)，之前我以为仅仅只有v-model绑定数据，而其他指令比如v-for仅仅只在页面加载的时候渲染完成页面，这可能是受之前用<strong>thinkphp</strong>(php的一个框架)和<strong>smaty</strong>(php渲染页面的视图引擎)的影响，这两者都是直接在加载时渲染完页面的。然而Vue是绑定数据，数据一有改变所有绑定这个数据的地方通俗点就是所有用到这个数据的地方都会有动态的改变。<br>不多说，直接上代码：<br><img src="/images/model.png" alt="model icon"><br>还有一个坑是v-for的index参数<br><img src="/images/index1.png" alt="index1 icon"><br><img src="/images/index2.png" alt="index2 icon"><br>以上是正确的用法，我碰到的问题是我之前直接用this.index获取元素的下标，console.log显示为undefined，但是splice(this.index，1)居然能执行，我就觉得很神奇，但好在及时找到了正确的方法。</p>
<h2 id="前端的前景"><a href="#前端的前景" class="headerlink" title="前端的前景"></a>前端的前景</h2><p>之前去某上市公司认知实习时，了解到现阶段前端工程师是稀缺的，但是后端工程师是核心，大公司都没有全栈这个概念。但其实我的理解是，随着前端的发展，前端能做的事情越来越多不再是简单的做页面和传数据，比如如果业务逻辑放在前端来处理的话，后端会变得非常简洁。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次写技术博客，希望大家多多批评，能一起交流一起进步。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue.js </tag>
            
            <tag> mvvm </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
